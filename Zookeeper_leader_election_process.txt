In Apache Zookeeper, the process of leader election is critical for ensuring that a single node coordinates write operations and maintains data consistency across the cluster. Zookeeper uses a consensus algorithm based on Zab (Zookeeper Atomic Broadcast) for leader election. Here’s a step-by-step breakdown of how the leader is elected:

1. Startup Phase
When a Zookeeper ensemble (cluster) starts or when a leader fails, a new leader needs to be elected. During this time, all nodes (servers) in the ensemble are either looking for a leader or are already following a leader (if one exists).

2. Leader Election Algorithm
Zookeeper uses a modified version of the Paxos algorithm, but it's often referred to as a quorum-based protocol. The leader election process happens in phases:

a. Each Server Proposes Itself as a Leader
Each server in the Zookeeper ensemble votes for itself by broadcasting a vote (proposal) to all other servers. This vote contains two key pieces of information:
My ID (Server ID): The unique ID of the server proposing itself as the leader.
My Epoch (Zxid): The last transaction ID (Zxid) processed by the server. This indicates how up-to-date the server’s data is.
b. Vote Comparison
Each server compares its own vote with the votes it receives from other servers. The comparison is based on the Zxid and the Server ID:
Priority 1 (Zxid): The server with the highest Zxid is preferred since it has the most recent state of the system.
Priority 2 (Server ID): If two servers have the same Zxid, the server with the higher ID is preferred.
If a server receives a vote that is "better" than its current vote (i.e., has a higher Zxid or Server ID), it changes its vote to match that server’s vote and broadcasts this updated vote to others.
c. Majority Consensus (Quorum)
Once a server has received votes from a majority of the ensemble (a quorum) that agree on the same candidate, that server becomes the new leader.
The quorum is defined as more than half of the total nodes in the ensemble. For example, in a 5-node ensemble, at least 3 nodes must agree on the same leader.
d. Leader Announcement
Once a server has been elected as the leader, it informs the other servers in the ensemble that it is the leader.
The other servers (followers) acknowledge this and start following the leader for coordination.
3. Synchronization Phase
After a leader is elected, the new leader synchronizes its state with the followers. The leader ensures that all followers have the latest committed data. The process goes as follows:

The leader sends its latest state to all followers.
Followers update their state to match the leader.
Once all followers are in sync, the leader starts processing client requests.
4. Steady State
Once the leader is elected and all followers are synchronized, the Zookeeper ensemble reaches a steady state.
The leader coordinates all write operations, while followers can serve read requests.
5. Handling Leader Failure
If the leader fails or crashes during its term, the ensemble automatically detects the failure (through heartbeat timeouts) and a new leader election process is initiated. The process starts from step 1, where nodes vote for a new leader.

Summary of Key Concepts:
Zxid: Zookeeper's transaction ID, which helps to determine how up-to-date a server’s data is.
Quorum: Majority of servers (more than half) must agree on the same leader.
Leader: Coordinates write requests, and maintains consistency in the ensemble.
Followers: Follow the leader and apply its updates to maintain the system's state.
In Zookeeper, this leader election process ensures that the system can continue functioning even in the face of node failures, while maintaining data consistency.